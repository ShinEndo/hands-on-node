node --experimental-repl-await
------------------------------------
## Sinon.JS
------------------------------------
const sinon = require('sinon');

# spy
------------------------------------
sinon.spy(console, 'log');

console.log('foo');

sinon.assert.calledWith(console.log, 'foo');

sinon.assert.calledOnce(console.log);

sinon.assert.calledWith(console.log, 'bar');

sinon.assert.calledTwice(console.log);

const spy = sinon.spy();

setTimeout(spy, 0);

sinon.assert.calledOnce(spy);

# stub
------------------------------------
sinon.stub(String.prototype, 'startsWith').returns(true);

'foo'.startsWith('f');

'foo'.startsWith('x');

sinon.assert.calledWith(String.prototype.startsWith, 'f');

sinon.assert.calledWith(String.prototype.startsWith);

sinon.assert.calledWith(String.prototype.startsWith, 'y');

sinon.assert.calledOnce(String.prototype.startsWith);

sinon.stub(String.prototype, 'endsWith');

'foo'.endsWith('o');

# mock
------------------------------------
const mock = sinon
	.mock(JSON)
	.expects('parse')
	.withExactArgs('{"foo": 1}')
	.atLeast(1)
	.atMost(2)
	.returns({});

mock.verify();

JSON.parse('{"foo": 1}');

mock.verify();

JSON.parse('{"bar": 1}');

JSON.parse('{"foo": 1}');

# restore
------------------------------------
sinon.restore();

## Jest
------------------------------------
const jest = require('jest-mock');
const { expect } = require('expect');

# jest.spyOn()
------------------------------------
jest.spyOn(console, 'log');

console.log('foo');

expect(console.log).toHaveBeenCalledWith('foo');

expect(console.log).toHaveBeenCalledTimes(1);

expect(console.log).toHaveBeenCalledWith('bar');

expect(console.log).toHaveBeenCalledTimes(2);

console.log.mockReturnValue(true);

console.log('foo');

console.log.mockImplementation((arg1, arg2) => arg1 + arg2);

# jest.fn()
------------------------------------
const emptyMock = jest.fn();

emptyMock(10, 20);

expect(emptyMock).toHaveBeenCalledTimes(1);

const multiplyMock = jest.fn((a, b) => a * b);

multiplyMock(10, 20);

expect(multiplyMock).toHaveBeenCalledTimes(1);

# jest.mock()
------------------------------------
jest.mock();

# jest.restoreAllMocks()
------------------------------------
jest.restoreAllMocks();